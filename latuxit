#!/usr/bin/env bash

# LaTuXit: A command line implementation of the Mac OS X program LaTeXit (http://pierre.chachatelier.fr/latexit).

# Copyright (c) 2012, 2013, 2014  Lester Hedges <lester.hedges+latuxit@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Define defaults.
LATUXIT_EDITOR=vim
LATUXIT_COLOR=Black
LATUXIT_COLOR_SET=false
LATUXIT_LIBRARY_SIZE=1000
LATUXIT_POSTSCRIPT=true
LATUXIT_PURGE_CONFIRMATION=true
LATUXIT_FILE_NAME=latuxit
LATUXIT_FILE_NAME_SET=false
LATUXIT_EQUATION_SET=false
LATUXIT_IMAGE_SET=false
LATUXIT_RGB_MODE=false
LATUXIT_HASH_MODE=false
LATUXIT_STDIN_MODE=false
LATUXIT_SEARCH_MODE=false
LATUXIT_BATCH_MODE=false
LATUXIT_PURGE=false

# Source latuxit user variables.
if [ -f ~/.latuxitrc ]; then
    source ~/.latuxitrc
elif [ -f ~/.latuxit/latuxitrc ]; then
    source ~/.latuxit/latuxitrc
fi

# Check for color file.
if [ ! -f ~/.latuxit/latuxit.colors ]; then
    echo " Missing ~/.latuxit/latuxit.colors"
    exit
fi

# Change to working directory.
CURRENT_DIR=$PWD
cd ~/.latuxit

# Library purge function.
purge () {
    if [ "$LATUXIT_PURGE_CONFIRMATION" == "true" ]; then
        echo -n " Are you sure you want to purge the equation library [Y/n]? "
        read -e purge
        while [[ "$purge" != "Y" && "$purge" != "n" && "$purge" != "N" ]]; do
            echo -n " Are you sure you want to purge the equation library [Y/n]? "
            read -e purge
        done
        if [[ "$purge" == "Y" ]]; then
            rm -f library/*
        fi
    fi
}

# Create unique identity hash for equation.
equation_hash () {
    if [[ `uname` == "Darwin" ]]; then
        HASH=`echo $LATUXIT_EQUATION | md5`
    else
        HASH=`echo $LATUXIT_EQUATION | md5sum | awk '{print $1}'`
    fi
}

# List equations in library.
list () {
    if [ "$(ls -A library/)" ]; then
        for i in $(ls library/*); do
            hash=`echo $i | awk -F "library/" '{print $2}'`
            eqn=`cat $i`
            echo "$hash \"$eqn\""
        done
        exit
    else
        echo " Equation library is empty!"; exit
    fi
}

# Simple parser for command line options.
while [ $# -gt 0 ]; do
    case "$1" in
    -e|--equation)
        LATUXIT_EQUATION="$2";
        LATUXIT_EQUATION_SET=true;;
    -c|--color)
        LATUXIT_COLOR="$2";
        LATUXIT_COLOR_SET=true;;
    -o|--output)
        LATUXIT_FILE_NAME="$2";
        LATUXIT_FILE_NAME_SET=true;;
    -l|--list)
        list;
        exit;;
    -s|--search)
        LATUXIT_SEARCH_STRING="$2";
        LATUXIT_SEARCH_MODE=true;;
    -m|--md5)
        LATUXIT_HASH="$2";
        LATUXIT_HASH_MODE=true;;
    -b|--batch)
        LATUXIT_BATCH_MODE=true;;
    -p|--purge)
        LATUXIT_PURGE=true;;
    -h|--help)
        man latuxit; exit;;
    *.pdf|*.ps)
        LATUXIT_IMAGE="$1"; LATUXIT_IMAGE_SET=true
        if [ "$(echo ${LATUXIT_IMAGE#*.})" == "pdf" ]; then
            LATUXIT_IMAGE_TYPE=pdf
        elif [ "$(echo ${LATUXIT_IMAGE#*.})" == "ps" ]; then
            LATUXIT_IMAGE_TYPE=ps
        fi;;
    -*)
        echo " Unrecognized option \"$1\"";
        echo " Run \"latuxit --help\" for information.";
        exit;;
    esac
    shift
done

# Check for equation input from stdin.
if [ ! -t 0 ]; then
    LATUXIT_STDIN_MODE=true

    if [ "$LATUXIT_EQUATION_SET" == "true" ]; then
        echo " Equation was set using stdin and from the command-line!"; exit
    fi

    if [ -f latuxit.eqn ]; then
        rm latuxit.eqn
    fi

    while read -r line ; do
        echo $line >> latuxit.eqn
    done

    LATUXIT_EQUATION=`cat latuxit.eqn`; rm latuxit.eqn
fi

# Perform equation search (ignores all other options).
if [ "$LATUXIT_SEARCH_MODE" == "true" ]; then
    if [ -n "$LATUXIT_SEARCH_STRING" ]; then
        list | grep $LATUXIT_SEARCH_STRING 2> /dev/null
        exit
    else
        echo " No search string was specified!"; exit
    fi
fi

# Run latuxit in hash mode (process existing equation from library).
if [ "$LATUXIT_HASH_MODE" == "true" ]; then

    # Check to see that an equation hasn't also been specified.
    if [ "$LATUXIT_EQUATION_SET" == "true" ] || [ "$LATUXIT_STDIN_MODE" == "true" ]; then
        echo " Hash mode and equation specified. Exiting!"; exit
    fi

    # Check if library is empty.
    if [ "$(ls -A library/)" ]; then
        if ls library/${LATUXIT_HASH}* &> /dev/null; then
            # Find number of matches.
            matches=`ls library/${LATUXIT_HASH}* | wc -l`

            if [ "$matches" -gt "1" ]; then
                echo " Too many equations match, try longer hash sequence."; exit
            fi

            # Cat equation from library into equation file.
            cat library/${LATUXIT_HASH}* > latuxit.eqn
        else
            echo " No match for hash! Exiting."; exit
        fi
    else
        echo " Equation library is empty! Exiting."; exit
    fi
fi

# Open editor if no equation from command-line or stdin.
if [ "$LATUXIT_IMAGE_SET" == "false" ]; then
    if [ "$LATUXIT_EQUATION_SET" == "false" ]; then
        if [ "$LATUXIT_STDIN_MODE" == "false" ]; then
            if [ "$LATUXIT_PURGE" == "true" ]; then
                purge; exit
            fi
            $LATUXIT_EDITOR latuxit.eqn
            if [ -f latuxit.eqn ]; then
                if [ -s latuxit.eqn ]; then
                    LATUXIT_EQUATION=`cat latuxit.eqn`; rm latuxit.eqn
                else
                    echo " No equation defined. Exiting!"; exit
                fi
            else
                echo " No equation defined. Exiting!"; exit
            fi
        fi
    fi
# Read metadata from existing image and open for editing.
# Only read color metadata if color option is unset.
else
    if [ "$LATUXIT_EQUATION_SET" == "true" ] || [ "$LATUXIT_STDIN_MODE" == "true" ]; then
        echo "Ignoring equation. Searching for image metadata instead."
    fi
    if [ $(for i in ${CURRENT_DIR}/$LATUXIT_IMAGE; do strings $i | grep latuxit_hash; done | awk '{print $2}') ]; then
        HASH=`for i in ${CURRENT_DIR}/$LATUXIT_IMAGE; do strings $i | grep latuxit_hash; done | awk '{print $2}'`
        if [ "$LATUXIT_COLOR_SET" == "false" ]; then
            LATUXIT_COLOR=`for i in ${CURRENT_DIR}/$LATUXIT_IMAGE; do strings $i | grep latuxit_color; done | awk '{print $2}'`
        fi
        if [ -f library/$HASH ]; then
            cp library/$HASH equation_backup
            $LATUXIT_EDITOR library/$HASH
            LATUXIT_EQUATION=`cat library/$HASH`
            if [ "$LATUXIT_FILE_NAME_SET" == "false" ]; then
                LATUXIT_FILE_NAME=`echo ${LATUXIT_IMAGE%.$LATUXIT_IMAGE_TYPE}`
                rm library/$HASH equation_backup
            else
                OLD_FILE_NAME=`echo ${LATUXIT_IMAGE%.$LATUXIT_IMAGE_TYPE}`
                if [ "$OLD_FILE_NAME" == "$LATUXIT_FILE_NAME" ]; then
                    rm library/$HASH equation_backup
                else
                    mv equation_backup library/$HASH
                fi
            fi
        else
            echo " Equation not found in library!"
            exit
        fi
    else
        echo " Image file not generated by latuxit. Aborting!"; exit
    fi
fi

# Check for color support.
if [ "$LATUXIT_COLOR" != "Black" ]; then
    color_check=`grep -w $LATUXIT_COLOR latuxit.colors`
    if [ "$LATUXIT_COLOR" != "$color_check" ]; then
        if [ "${LATUXIT_COLOR:0:1}" != "{" ]; then
            echo " $LATUXIT_COLOR is not a supported color."
            echo " Listing supported colors..."
            sleep 1
            less latuxit.colors
            echo " Alternatively, try RGB mode: --color=\"{R,G,B}\""
            exit
        else
            color_check=`echo $LATUXIT_COLOR | grep '^{[0-9][0-9]*,[0-9][0-9]*,[0-9][0-9]*}$'`
            rgb_style="RGB"
            if [ "$LATUXIT_COLOR" != "$color_check" ]; then
                color_check=`echo $LATUXIT_COLOR | grep '^{[0-1][.][0-9]*,[0-1][.][0-9]*,[0-1][.][0-9]*}$'`
                rgb_style="rgb"
                if [ "$LATUXIT_COLOR" != "$color_check" ]; then
                    echo "RGB string doesn't appear to be formatted correctly."
                    echo "--color=\"{R,G,B}\" where R,G,B = [0-255] or [0-1.0]"
                    exit
                else LATUXIT_RGB_MODE=true
                fi
            else LATUXIT_RGB_MODE=true
            fi
        fi
    fi
fi

exit_status=1
FAILED=false

# Loop until a valid equation has been entered.
while [ "$exit_status" != "0" ]; do

    # Create hash.
    equation_hash

    # Store equation in library.
    echo $LATUXIT_EQUATION > library/$HASH

    # Create tex file.
    if [ "$LATUXIT_RGB_MODE" == "true" ]; then
        echo "\documentclass{article}\usepackage[usenames,dvipsnames]{xcolor}\definecolor{rgb_color}{$rgb_style}$LATUXIT_COLOR\begin{document}\pagestyle{empty}\textcolor{rgb_color}{\[" $LATUXIT_EQUATION "\]}\end{document}" > temp.tex
    else
        echo "\documentclass{article}\usepackage[usenames,dvipsnames]{xcolor}\begin{document}\pagestyle{empty}\textcolor{$LATUXIT_COLOR}{\[" $LATUXIT_EQUATION "\]}\end{document}" > temp.tex
    fi

    # Process tex file.
    pdflatex -halt-on-error temp.tex > /dev/null 2>&1

    # Get exit status.
    exit_status="$?"

    # Pdflatex failed, open equation for editing.
    if [ "$exit_status" != "0" ]; then
        if [ "$LATUXIT_BATCH_MODE" != "true" ]; then
            echo " Could not process equation, please edit..."
            sleep 1
            $LATUXIT_EDITOR library/$HASH
            LATUXIT_EQUATION=`cat library/$HASH`
            rm -f library/$HASH
        else
            # Delete failed equation from library.
            rm -f library/$HASH

            # Mark equation as failed.
            FAILED=true

            # Output failed equation to stdout.
            echo " [FAILED] $LATUXIT_EQUATION"

            # Set exit status to abort loop.
            exit_status=0
        fi
    fi
done

if [ "$FAILED" != "true" ]; then
    # Crop pdf.
    pdfcrop temp.pdf crop.pdf > /dev/null 2>&1

    # Create metadata.
    echo "%%latuxit_hash $HASH" > metadata
    echo "%%latuxit_color $LATUXIT_COLOR" >> metadata

    # Append metadata to pdf
    cat crop.pdf metadata > temp
    mv temp crop.pdf

    # Create postscript copy of equation.
    if [ "$LATUXIT_POSTSCRIPT" == "true" ]; then
        gs -sDEVICE=ps2write -dNOCACHE -sOutputFile=temp.ps -q -dbatch -dNOPAUSE crop.pdf -c quit 2>&1
        cat temp.ps metadata > temp
        mv temp ${CURRENT_DIR}/${LATUXIT_FILE_NAME}.ps
        rm temp.ps
    fi

    # Move pdf to user directory.
    mv crop.pdf ${CURRENT_DIR}/${LATUXIT_FILE_NAME}.pdf

    # Clean up.
    rm temp.pdf
    rm temp.tex
    rm temp.aux
    rm temp.log
    rm metadata
fi

# Purge equation library.
if [ "$LATUXIT_PURGE" == "true" ]; then
    purge
fi

# Check library size and prune if necessary.
library_size=`ls library/* 2> /dev/null | wc -l`
library_overflow=$((library_size-LATUXIT_LIBRARY_SIZE))
if [ $library_overflow -gt 0 ]; then
    for i in $( ls -tr library | head -n $library_overflow ); do
        rm library/$i
    done
fi

# Switch back to original directory.
cd $CURRENT_DIR
